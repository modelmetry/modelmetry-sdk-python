# coding: utf-8

"""
    Modelmetry API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from modelmetry.openapi.models.check import Check

class TestCheck(unittest.TestCase):
    """Check unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Check:
        """Test Check
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Check`
        """
        model = Check()
        if include_optional:
            return Check(
                var_schema = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_by = '',
                duration_ms = 56,
                guardrail_id = '',
                id = '',
                metadata = None,
                outcome = 'pass',
                payload = modelmetry.openapi.models.payload.Payload(
                    input = modelmetry.openapi.models.completion_payload_input.CompletionPayload_Input(), 
                    output = modelmetry.openapi.models.output.Output(
                        messages = [
                            modelmetry.openapi.models.chat_input_messages_inner.ChatInput_Messages_inner()
                            ], 
                        text = '', ), ),
                summarised_entries = [
                    modelmetry.openapi.models.summarised_entry.SummarisedEntry(
                        duration_ms = 56, 
                        evaluator_id = '', 
                        findings = [
                            {
                                'key' : null
                                }
                            ], 
                        id = '', 
                        instance_id = '', 
                        message = '', 
                        outcome = '', 
                        score = 1.337, 
                        skip = '', 
                        tenant_id = '', )
                    ],
                tenant_id = '',
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_by = ''
            )
        else:
            return Check(
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_by = '',
                duration_ms = 56,
                guardrail_id = '',
                id = '',
                metadata = None,
                outcome = 'pass',
                payload = modelmetry.openapi.models.payload.Payload(
                    input = modelmetry.openapi.models.completion_payload_input.CompletionPayload_Input(), 
                    output = modelmetry.openapi.models.output.Output(
                        messages = [
                            modelmetry.openapi.models.chat_input_messages_inner.ChatInput_Messages_inner()
                            ], 
                        text = '', ), ),
                summarised_entries = [
                    modelmetry.openapi.models.summarised_entry.SummarisedEntry(
                        duration_ms = 56, 
                        evaluator_id = '', 
                        findings = [
                            {
                                'key' : null
                                }
                            ], 
                        id = '', 
                        instance_id = '', 
                        message = '', 
                        outcome = '', 
                        score = 1.337, 
                        skip = '', 
                        tenant_id = '', )
                    ],
                tenant_id = '',
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_by = '',
        )
        """

    def testCheck(self):
        """Test Check"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
