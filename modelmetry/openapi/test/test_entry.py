# coding: utf-8

"""
    Modelmetry API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from modelmetry.openapi.models.entry import Entry

class TestEntry(unittest.TestCase):
    """Entry unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Entry:
        """Test Entry
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Entry`
        """
        model = Entry()
        if include_optional:
            return Entry(
                var_schema = '',
                check_id = '',
                config = None,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_by = '',
                duration_ms = 56,
                evaluator_id = '',
                findings = [
                    {
                        'key' : null
                        }
                    ],
                finished_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                grading = modelmetry.openapi.models.grading_configuration.GradingConfiguration(
                    assessments = [
                        modelmetry.openapi.models.assessment.Assessment(
                            action = 'pass', 
                            expression = '', 
                            id = '', 
                            message = '', )
                        ], ),
                id = '',
                instance_id = '',
                message = '',
                metadata = None,
                outcome = 'na',
                payload = modelmetry.openapi.models.payload.Payload(
                    completion = {
                        'key' : null
                        }, ),
                skip = '',
                span_id = '',
                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                tenant_id = '',
                trace_id = '',
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_by = ''
            )
        else:
            return Entry(
                check_id = '',
                config = None,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_by = '',
                duration_ms = 56,
                evaluator_id = '',
                findings = [
                    {
                        'key' : null
                        }
                    ],
                finished_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                grading = modelmetry.openapi.models.grading_configuration.GradingConfiguration(
                    assessments = [
                        modelmetry.openapi.models.assessment.Assessment(
                            action = 'pass', 
                            expression = '', 
                            id = '', 
                            message = '', )
                        ], ),
                id = '',
                instance_id = '',
                message = '',
                metadata = None,
                outcome = 'na',
                payload = modelmetry.openapi.models.payload.Payload(
                    completion = {
                        'key' : null
                        }, ),
                skip = '',
                span_id = '',
                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                tenant_id = '',
                trace_id = '',
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_by = '',
        )
        """

    def testEntry(self):
        """Test Entry"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
