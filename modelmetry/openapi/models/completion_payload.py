# coding: utf-8

"""
    Modelmetry API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from modelmetry.openapi.models.completion_payload_context import CompletionPayloadContext
from modelmetry.openapi.models.completion_payload_input import CompletionPayloadInput
from modelmetry.openapi.models.options import Options
from modelmetry.openapi.models.output import Output
from typing import Optional, Set
from typing_extensions import Self

class CompletionPayload(BaseModel):
    """
    CompletionPayload
    """ # noqa: E501
    context: Optional[CompletionPayloadContext] = Field(default=None, alias="Context")
    input: Optional[CompletionPayloadInput] = Field(default=None, alias="Input")
    model: StrictStr = Field(alias="Model")
    options: Options = Field(alias="Options")
    output: Optional[Output] = Field(default=None, alias="Output")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["Context", "Input", "Model", "Options", "Output"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompletionPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['Context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of input
        if self.input:
            _dict['Input'] = self.input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['Options'] = self.options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output
        if self.output:
            _dict['Output'] = self.output.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompletionPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Context": CompletionPayloadContext.from_dict(obj["Context"]) if obj.get("Context") is not None else None,
            "Input": CompletionPayloadInput.from_dict(obj["Input"]) if obj.get("Input") is not None else None,
            "Model": obj.get("Model"),
            "Options": Options.from_dict(obj["Options"]) if obj.get("Options") is not None else None,
            "Output": Output.from_dict(obj["Output"]) if obj.get("Output") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


