# coding: utf-8

"""
    Modelmetry API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from modelmetry.openapi.models.create_event_params import CreateEventParams
from modelmetry.openapi.models.create_finding_params import CreateFindingParams
from modelmetry.openapi.models.create_session_params import CreateSessionParams
from modelmetry.openapi.models.create_span_params import CreateSpanParams
from modelmetry.openapi.models.create_trace_params import CreateTraceParams
from typing import Optional, Set
from typing_extensions import Self

class IngestSignalsV1RequestBody(BaseModel):
    """
    IngestSignalsV1RequestBody
    """ # noqa: E501
    var_schema: Optional[StrictStr] = Field(default=None, description="A URL to the JSON Schema for this object.", alias="$schema")
    events: Optional[List[CreateEventParams]] = Field(default=None, alias="Events")
    findings: Optional[List[CreateFindingParams]] = Field(default=None, alias="Findings")
    sessions: Optional[List[CreateSessionParams]] = Field(default=None, alias="Sessions")
    spans: Optional[List[CreateSpanParams]] = Field(default=None, alias="Spans")
    traces: Optional[List[CreateTraceParams]] = Field(default=None, alias="Traces")
    __properties: ClassVar[List[str]] = ["$schema", "Events", "Findings", "Sessions", "Spans", "Traces"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IngestSignalsV1RequestBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "var_schema",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in events (list)
        _items = []
        if self.events:
            for _item in self.events:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Events'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in findings (list)
        _items = []
        if self.findings:
            for _item in self.findings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Findings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sessions (list)
        _items = []
        if self.sessions:
            for _item in self.sessions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Sessions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in spans (list)
        _items = []
        if self.spans:
            for _item in self.spans:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Spans'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in traces (list)
        _items = []
        if self.traces:
            for _item in self.traces:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Traces'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IngestSignalsV1RequestBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "$schema": obj.get("$schema"),
            "Events": [CreateEventParams.from_dict(_item) for _item in obj["Events"]] if obj.get("Events") is not None else None,
            "Findings": [CreateFindingParams.from_dict(_item) for _item in obj["Findings"]] if obj.get("Findings") is not None else None,
            "Sessions": [CreateSessionParams.from_dict(_item) for _item in obj["Sessions"]] if obj.get("Sessions") is not None else None,
            "Spans": [CreateSpanParams.from_dict(_item) for _item in obj["Spans"]] if obj.get("Spans") is not None else None,
            "Traces": [CreateTraceParams.from_dict(_item) for _item in obj["Traces"]] if obj.get("Traces") is not None else None
        })
        return _obj


