# coding: utf-8

"""
    Modelmetry API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from modelmetry.openapi.models.assistant_message_contents_inner import AssistantMessageContentsInner
from modelmetry.openapi.models.tool_call import ToolCall
from typing import Optional, Set
from typing_extensions import Self

class AssistantMessage(BaseModel):
    """
    AssistantMessage
    """ # noqa: E501
    contents: List[AssistantMessageContentsInner] = Field(alias="Contents")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    role: StrictStr = Field(alias="Role")
    tool_calls: Optional[List[ToolCall]] = Field(default=None, alias="ToolCalls")
    __properties: ClassVar[List[str]] = ["Contents", "Name", "Role", "ToolCalls"]

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['assistant']):
            raise ValueError("must be one of enum values ('assistant')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssistantMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contents (list)
        _items = []
        if self.contents:
            for _item in self.contents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Contents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tool_calls (list)
        _items = []
        if self.tool_calls:
            for _item in self.tool_calls:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ToolCalls'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssistantMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Contents": [AssistantMessageContentsInner.from_dict(_item) for _item in obj["Contents"]] if obj.get("Contents") is not None else None,
            "Name": obj.get("Name"),
            "Role": obj.get("Role"),
            "ToolCalls": [ToolCall.from_dict(_item) for _item in obj["ToolCalls"]] if obj.get("ToolCalls") is not None else None
        })
        return _obj


