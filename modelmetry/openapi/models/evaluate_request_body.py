# coding: utf-8

"""
    Modelmetry API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from modelmetry.openapi.models.evaluate_request_by_config import EvaluateRequestByConfig
from modelmetry.openapi.models.evaluate_request_by_entry import EvaluateRequestByEntry
from modelmetry.openapi.models.evaluate_request_by_instance import EvaluateRequestByInstance
from typing import Optional, Set
from typing_extensions import Self

class EvaluateRequestBody(BaseModel):
    """
    EvaluateRequestBody
    """ # noqa: E501
    var_schema: Optional[StrictStr] = Field(default=None, description="A URL to the JSON Schema for this object.", alias="$schema")
    by_config: Optional[EvaluateRequestByConfig] = Field(default=None, alias="ByConfig")
    by_entry: Optional[EvaluateRequestByEntry] = Field(default=None, alias="ByEntry")
    by_instance: Optional[EvaluateRequestByInstance] = Field(default=None, alias="ByInstance")
    persist: Optional[StrictBool] = Field(default=None, alias="Persist")
    tenant_id: StrictStr = Field(alias="TenantID")
    __properties: ClassVar[List[str]] = ["$schema", "ByConfig", "ByEntry", "ByInstance", "Persist", "TenantID"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EvaluateRequestBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "var_schema",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of by_config
        if self.by_config:
            _dict['ByConfig'] = self.by_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of by_entry
        if self.by_entry:
            _dict['ByEntry'] = self.by_entry.to_dict()
        # override the default output from pydantic by calling `to_dict()` of by_instance
        if self.by_instance:
            _dict['ByInstance'] = self.by_instance.to_dict()
        # set to None if persist (nullable) is None
        # and model_fields_set contains the field
        if self.persist is None and "persist" in self.model_fields_set:
            _dict['Persist'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EvaluateRequestBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "$schema": obj.get("$schema"),
            "ByConfig": EvaluateRequestByConfig.from_dict(obj["ByConfig"]) if obj.get("ByConfig") is not None else None,
            "ByEntry": EvaluateRequestByEntry.from_dict(obj["ByEntry"]) if obj.get("ByEntry") is not None else None,
            "ByInstance": EvaluateRequestByInstance.from_dict(obj["ByInstance"]) if obj.get("ByInstance") is not None else None,
            "Persist": obj.get("Persist"),
            "TenantID": obj.get("TenantID")
        })
        return _obj


