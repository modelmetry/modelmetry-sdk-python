# coding: utf-8

"""
    Modelmetry API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from modelmetry.openapi.models.finding import Finding
from modelmetry.openapi.models.grading_configuration import GradingConfiguration
from modelmetry.openapi.models.payload import Payload
from typing import Optional, Set
from typing_extensions import Self

class Entry(BaseModel):
    """
    Entry
    """ # noqa: E501
    var_schema: Optional[StrictStr] = Field(default=None, description="A URL to the JSON Schema for this object.", alias="$schema")
    check_id: StrictStr = Field(alias="CheckID")
    config: Dict[str, Any] = Field(alias="Config")
    created_at: datetime = Field(alias="CreatedAt")
    created_by: StrictStr = Field(alias="CreatedBy")
    duration_ms: StrictInt = Field(alias="DurationMs")
    evaluator_id: StrictStr = Field(alias="EvaluatorID")
    findings: List[Finding] = Field(alias="Findings")
    finished_at: datetime = Field(alias="FinishedAt")
    grading: GradingConfiguration = Field(alias="Grading")
    id: StrictStr = Field(alias="ID")
    instance_id: StrictStr = Field(alias="InstanceID")
    message: StrictStr = Field(alias="Message")
    metadata: Dict[str, Any] = Field(alias="Metadata")
    outcome: StrictStr = Field(description="The status of the entry.", alias="Outcome")
    payload: Payload = Field(alias="Payload")
    skip: StrictStr = Field(alias="Skip")
    span_id: StrictStr = Field(alias="SpanID")
    started_at: datetime = Field(alias="StartedAt")
    tenant_id: StrictStr = Field(alias="TenantID")
    trace_id: StrictStr = Field(alias="TraceID")
    updated_at: datetime = Field(alias="UpdatedAt")
    updated_by: StrictStr = Field(alias="UpdatedBy")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["$schema", "CheckID", "Config", "CreatedAt", "CreatedBy", "DurationMs", "EvaluatorID", "Findings", "FinishedAt", "Grading", "ID", "InstanceID", "Message", "Metadata", "Outcome", "Payload", "Skip", "SpanID", "StartedAt", "TenantID", "TraceID", "UpdatedAt", "UpdatedBy"]

    @field_validator('outcome')
    def outcome_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['na', 'pending', 'pass', 'fail', 'error', 'skip']):
            raise ValueError("must be one of enum values ('na', 'pending', 'pass', 'fail', 'error', 'skip')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Entry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "var_schema",
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in findings (list)
        _items = []
        if self.findings:
            for _item in self.findings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Findings'] = _items
        # override the default output from pydantic by calling `to_dict()` of grading
        if self.grading:
            _dict['Grading'] = self.grading.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payload
        if self.payload:
            _dict['Payload'] = self.payload.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Entry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "$schema": obj.get("$schema"),
            "CheckID": obj.get("CheckID"),
            "Config": obj.get("Config"),
            "CreatedAt": obj.get("CreatedAt"),
            "CreatedBy": obj.get("CreatedBy"),
            "DurationMs": obj.get("DurationMs"),
            "EvaluatorID": obj.get("EvaluatorID"),
            "Findings": [Finding.from_dict(_item) for _item in obj["Findings"]] if obj.get("Findings") is not None else None,
            "FinishedAt": obj.get("FinishedAt"),
            "Grading": GradingConfiguration.from_dict(obj["Grading"]) if obj.get("Grading") is not None else None,
            "ID": obj.get("ID"),
            "InstanceID": obj.get("InstanceID"),
            "Message": obj.get("Message"),
            "Metadata": obj.get("Metadata"),
            "Outcome": obj.get("Outcome") if obj.get("Outcome") is not None else 'na',
            "Payload": Payload.from_dict(obj["Payload"]) if obj.get("Payload") is not None else None,
            "Skip": obj.get("Skip"),
            "SpanID": obj.get("SpanID"),
            "StartedAt": obj.get("StartedAt"),
            "TenantID": obj.get("TenantID"),
            "TraceID": obj.get("TraceID"),
            "UpdatedAt": obj.get("UpdatedAt"),
            "UpdatedBy": obj.get("UpdatedBy")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


