# coding: utf-8

"""
    Modelmetry API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ModelmetryScoreLLMAsJudgeV1Config(BaseModel):
    """
    ModelmetryScoreLLMAsJudgeV1Config
    """ # noqa: E501
    finding_name: StrictStr = Field(description="The name of the finding to use for the result (e.g., threatening_level, about_hotel_score).", alias="FindingName")
    instructions: Annotated[str, Field(min_length=1, strict=True)] = Field(description="You are an LLM evaluator. Please score from 0.0 to 1.0 how likely the user is to be satisfied with this answer, from 0.0 being not satisfied at all to 1.0 being completely satisfied.", alias="Instructions")
    max_tokens: StrictInt = Field(description="The limit on the number of tokens the entire prompt can be.", alias="MaxTokens")
    model: StrictStr = Field(description="The model to use.", alias="Model")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["FindingName", "Instructions", "MaxTokens", "Model"]

    @field_validator('model')
    def model_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['openai/gpt-4o-mini', 'openai/gpt-4o', 'openai/gpt-3.5-turbo', 'groq/llama3-8b-8192', 'groq/llama3-70b-8192', 'groq/mixtral-8x7b-32768', 'groq/gemma-7b-it', 'google/gemini-1.5-flash', 'google/gemini-1.5-pro']):
            raise ValueError("must be one of enum values ('openai/gpt-4o-mini', 'openai/gpt-4o', 'openai/gpt-3.5-turbo', 'groq/llama3-8b-8192', 'groq/llama3-70b-8192', 'groq/mixtral-8x7b-32768', 'groq/gemma-7b-it', 'google/gemini-1.5-flash', 'google/gemini-1.5-pro')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelmetryScoreLLMAsJudgeV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelmetryScoreLLMAsJudgeV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "FindingName": obj.get("FindingName"),
            "Instructions": obj.get("Instructions"),
            "MaxTokens": obj.get("MaxTokens") if obj.get("MaxTokens") is not None else 8192,
            "Model": obj.get("Model") if obj.get("Model") is not None else 'openai/gpt-4o-mini'
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


