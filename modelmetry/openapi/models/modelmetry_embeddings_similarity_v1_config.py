# coding: utf-8

"""
    Modelmetry API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class ModelmetryEmbeddingsSimilarityV1Config(BaseModel):
    """
    ModelmetryEmbeddingsSimilarityV1Config
    """ # noqa: E501
    extraction_method: StrictStr = Field(description="The method to use for extracting text strings.", alias="ExtractionMethod")
    model: StrictStr = Field(description="The model to use for encoding text to embeddings (only OpenAI models at this stage).", alias="Model")
    reference_text: StrictStr = Field(description="The reference text to compare against. Be as detailed or as general as you like.", alias="ReferenceText")
    strategy: StrictStr = Field(description="The strategy to use for computing similarity.", alias="Strategy")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["ExtractionMethod", "Model", "ReferenceText", "Strategy"]

    @field_validator('extraction_method')
    def extraction_method_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['last-user-vs-assistant', 'reference-vs-all-messages', 'reference-vs-last-assistant', 'reference-vs-last-user']):
            raise ValueError("must be one of enum values ('last-user-vs-assistant', 'reference-vs-all-messages', 'reference-vs-last-assistant', 'reference-vs-last-user')")
        return value

    @field_validator('model')
    def model_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['openai/text-embedding-3-small', 'openai/text-embedding-3-large']):
            raise ValueError("must be one of enum values ('openai/text-embedding-3-small', 'openai/text-embedding-3-large')")
        return value

    @field_validator('strategy')
    def strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['cosine', 'euclidean-distance', 'dot-product']):
            raise ValueError("must be one of enum values ('cosine', 'euclidean-distance', 'dot-product')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelmetryEmbeddingsSimilarityV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelmetryEmbeddingsSimilarityV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ExtractionMethod": obj.get("ExtractionMethod"),
            "Model": obj.get("Model"),
            "ReferenceText": obj.get("ReferenceText"),
            "Strategy": obj.get("Strategy")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


