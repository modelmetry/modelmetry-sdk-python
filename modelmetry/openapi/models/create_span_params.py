# coding: utf-8

"""
    Modelmetry API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateSpanParams(BaseModel):
    """
    CreateSpanParams
    """ # noqa: E501
    end: datetime = Field(alias="End")
    family: Optional[StrictStr] = Field(default=None, alias="Family")
    family_data: Optional[Any] = Field(default=None, alias="FamilyData")
    message: Optional[StrictStr] = Field(default=None, alias="Message")
    metadata: Optional[Dict[str, Any]] = Field(default=None, alias="Metadata")
    name: StrictStr = Field(alias="Name")
    parent_id: Optional[StrictStr] = Field(default=None, alias="ParentID")
    severity: Optional[StrictStr] = Field(default=None, alias="Severity")
    start: datetime = Field(alias="Start")
    trace_id: StrictStr = Field(alias="TraceID")
    xid: StrictStr = Field(alias="XID")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["End", "Family", "FamilyData", "Message", "Metadata", "Name", "ParentID", "Severity", "Start", "TraceID", "XID"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateSpanParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if family_data (nullable) is None
        # and model_fields_set contains the field
        if self.family_data is None and "family_data" in self.model_fields_set:
            _dict['FamilyData'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateSpanParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "End": obj.get("End"),
            "Family": obj.get("Family"),
            "FamilyData": obj.get("FamilyData"),
            "Message": obj.get("Message"),
            "Metadata": obj.get("Metadata"),
            "Name": obj.get("Name"),
            "ParentID": obj.get("ParentID"),
            "Severity": obj.get("Severity"),
            "Start": obj.get("Start"),
            "TraceID": obj.get("TraceID"),
            "XID": obj.get("XID")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


